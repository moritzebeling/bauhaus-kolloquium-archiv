"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return right[Symbol.hasInstance](left); } else { return left instanceof right; } }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var videoPlayers = [];

var VideoPlayer =
/*#__PURE__*/
function () {
  _createClass(VideoPlayer, [{
    key: "convertTime",
    value: function convertTime(d) {
      if (!d || d === 'NaN') {
        return "0:00";
      }

      d = Number(d);
      var m = Math.floor(d % 3600 / 60);
      var s = Math.floor(d % 3600 % 60);
      return m + ":" + ('0' + s).slice(-2);
    }
  }]);

  function VideoPlayer(_container, _id) {
    _classCallCheck(this, VideoPlayer);

    var _this = this;

    this.container = _container;
    this.video = _container.getElementsByTagName('video')[0];
    this.id = _id;
    this.hasBeenPlayed = false; // switch off controls

    this.video.controls = false; // listen to clicks

    this.container.addEventListener('click', function ( event ) {
      _this.click(event);
    }, true);
    this.video.addEventListener('loadedmetadata', function ( event ) {
      _this.setTimeTotal();
    });
    this.video.addEventListener('play', function ( event ) {
      _this.play();
    });
    this.video.addEventListener('timeupdate', function ( event ) {
      _this.playtime();
    });
    this.video.addEventListener('pause', function ( event ) {
      _this.pause();
    });
    this.video.addEventListener('ended', function ( event ) {
      _this.reset();
    });
    this.video.addEventListener('error', function ( event ) {
      _this.wait();
    });
    this.video.addEventListener('stalled', function ( event ) {
      _this.wait();
    });
    this.video.addEventListener('waiting', function ( event ) {
      _this.wait();
    });
    this.video.addEventListener('playing', function ( event ) {
      _this.playtime();
    });
    this.status = 'ready';
    this.container.classList.add('ready');
  }

  _createClass(VideoPlayer, [{
    key: "setTimeTotal",
    value: function setTimeTotal() {
      this.duration = this.video.duration;
      this.updateText('time-total', this.convertTime(this.duration));
    }
  }, {
    key: "click",
    value: function click(event) {
      var target = event.target;
      this.stopAllOthers();

      if (target.classList.contains('play')) {
        this.video.play();
        return 'play';
      } else if (target.classList.contains('pause')) {
        this.video.pause();
        return 'pause';
      } else {
        this.playPause(this);
      }
    }
  }, {
    key: "reset",
    value: function reset() {
      this.video.pause();
      this.video.currentTime = 0;
      this.playtime();
    }
  }, {
    key: "wait",
    value: function wait() {
      this.status = 'wait';
      this.container.classList.add('please-wait');
    }
  }, {
    key: "playtime",
    value: function playtime() {
      if (this.status != 'play') {
        this.play();
      }

      this.updateText('time-now', this.convertTime(this.video.currentTime));
    }
  }, {
    key: "play",
    value: function play() {
      this.status = 'play';
      this.hasBeenPlayed = true;
      this.container.classList.remove('pause');
      this.container.classList.remove('please-wait');
      this.container.classList.add('play');
    }
  }, {
    key: "pause",
    value: function pause() {
      this.status = 'pause';
      this.container.classList.remove('play');
      this.container.classList.remove('please-wait');
      this.container.classList.add('pause');
    }
  }, {
    key: "playPause",
    value: function playPause() {
      if (this.status == 'play') {
        this.video.pause();
      } else {
        this.video.play();
      }
    }
  }, {
    key: "updateText",
    value: function updateText(_className, _txt) {
      var el = this.container.getElementsByClassName(_className);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = el[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var e = _step.value;
          e.innerHTML = _txt;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: "stopAllOthers",
    value: function stopAllOthers() {
      for (var _i = 0; _i < videoPlayers.length; _i++) {
        var video = videoPlayers[_i];

        if (video.id == this.id) {
          continue;
        }

        if (video.container.classList.contains("play") || video.container.classList.contains("please-wait")) {
          video.video.pause();
        }
      }
    }
  }]);

  return VideoPlayer;
}();

document.addEventListener('DOMContentLoaded', function () {
  // collection of all video players
  var videos = document.getElementsByClassName('video-player');
  var i = 0;
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = videos[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var video = _step2.value;
      videoPlayers.push(new VideoPlayer(video, i));
      i++;
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
});
